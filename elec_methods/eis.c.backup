// #include "eis.h"
// #include "../drivers/impedance_ad594x.h"

// #include <zephyr/kernel.h>
// #include <zephyr/logging/log.h>
// LOG_MODULE_REGISTER(elec_eis, LOG_LEVEL_INF);

// static volatile bool working = false;
// static elec_eis_config_t config = {
//   .freq_begin = 10,
//   .freq_end   = 10000,
//   .sample_count = 200,
//   .use_log    = true,
// };


// #define APPBUFF_SIZE 512
// static uint32_t AppBuff[APPBUFF_SIZE];
// static int  AD5940PlatformCfg(void);
// static void AD5940ImpedanceStructInit(void);
// static void elec_eis_loop();

// int elec_eis_init()
// {
//   int err = AD5940PlatformCfg();
//   if (err) { return -1; }
//   AD5940ImpedanceStructInit();
  
//   AppIMPInit(AppBuff, APPBUFF_SIZE);    /* Initialize IMP application. Provide a buffer, which is used to store sequencer commands */
//   AppIMPCtrl(IMPCTRL_START, 0);          /* Control IMP measurement to start. Second parameter has no meaning with this command. */

//   return 0;
// }

// int elec_eis_config(elec_eis_config_t config_)
// {
//   // copy
//   config.freq_begin   = config_.freq_begin;
//   config.freq_end     = config_.freq_end;
//   config.sample_count = config_.sample_count;
//   config.use_log      = config_.use_log;
//   return 0;
// }

// int elec_eis_start()
// {
//   if (config.freq_begin < 1)    return -1;
//   if (config.freq_end < 1)      return -2;
//   if (config.sample_count < 1)  return -3;
//   working = true;
//   // new task:
//   return elec_method_commit(&elec_eis_loop);
// }

// int elec_eis_stop()
// {
//   working = false;
//   int err = elec_method_commit(NULL);
//   LOG_INF("EIS stop, still working? %s", working ? "yes" : "no");
//   return err;
// }

// bool elec_eis_is_working()
// {
//   return working;
// }

// // Implemention:

// static int AD5940PlatformCfg(void)
// {
//   CLKCfg_Type clk_cfg;
//   FIFOCfg_Type fifo_cfg;
//   AGPIOCfg_Type gpio_cfg;

//   /* Use hardware reset */
//   AD5940_HWReset();
//   int err = AD5940_Initialize();
//   if (err) {
//     LOG_ERR("AD5940_Initialize Error: %d", err);
//     return err;
//   }
//   /* Platform configuration */
//   /* Step1. Configure clock */
//   clk_cfg.ADCClkDiv = ADCCLKDIV_1;
//   clk_cfg.ADCCLkSrc = ADCCLKSRC_HFOSC;
//   clk_cfg.SysClkDiv = SYSCLKDIV_1;
//   clk_cfg.SysClkSrc = SYSCLKSRC_HFOSC;
//   clk_cfg.HfOSC32MHzMode = bFALSE;
//   clk_cfg.HFOSCEn = bTRUE;
//   clk_cfg.HFXTALEn = bFALSE;
//   clk_cfg.LFOSCEn = bTRUE;
//   AD5940_CLKCfg(&clk_cfg);
//   /* Step2. Configure FIFO and Sequencer*/
//   fifo_cfg.FIFOEn = bFALSE;
//   fifo_cfg.FIFOMode = FIFOMODE_FIFO;
//   fifo_cfg.FIFOSize = FIFOSIZE_4KB;                       /* 4kB for FIFO, The reset 2kB for sequencer */
//   fifo_cfg.FIFOSrc = FIFOSRC_DFT;
//   // fifo_cfg.FIFOThresh = 4; //AppIMPCfg.FifoThresh;        /* DFT result. One pair for RCAL, another for Rz. One DFT result have real part and imaginary part */
//   fifo_cfg.FIFOThresh = 4;   //?
//   AD5940_FIFOCfg(&fifo_cfg);
//   fifo_cfg.FIFOEn = bTRUE;
//   AD5940_FIFOCfg(&fifo_cfg);
  
//   /* Step3. Interrupt controller */
//   AD5940_INTCCfg(AFEINTC_1, AFEINTSRC_ALLINT, bTRUE);   /* Enable all interrupt in INTC1, so we can check INTC flags */
//   AD5940_INTCClrFlag(AFEINTSRC_ALLINT);
//   AD5940_INTCCfg(AFEINTC_0, AFEINTSRC_DATAFIFOTHRESH, bTRUE); 
//   AD5940_INTCClrFlag(AFEINTSRC_ALLINT);
//   /* Step4: Reconfigure GPIO */
//   gpio_cfg.FuncSet = GP0_INT|GP1_SLEEP|GP2_SYNC;
//   // gpio_cfg.InputEnSet = 0;
//   gpio_cfg.InputEnSet = AGPIO_Pin2; // ?
//   gpio_cfg.OutputEnSet = AGPIO_Pin0|AGPIO_Pin1|AGPIO_Pin2;
//   gpio_cfg.OutVal = 0;
//   gpio_cfg.PullEnSet = 0;
//   AD5940_AGPIOCfg(&gpio_cfg);
//   AD5940_SleepKeyCtrlS(SLPKEY_UNLOCK);  /* Allow AFE to enter sleep mode. */
//   return 0;
// }

// static void AD5940ImpedanceStructInit(void)
// {
//   AppIMPCfg_Type *pImpedanceCfg;
  
//   AppIMPGetCfg(&pImpedanceCfg);
//   /* Step1: configure initialization sequence Info */
//   pImpedanceCfg->SeqStartAddr = 0;
//   pImpedanceCfg->MaxSeqLen = 512; /* @todo add checker in function */

//   // pImpedanceCfg->RcalVal = 10000.0;
// #ifdef AD5941
//     pImpedanceCfg->RcalVal = 1000.0; // modified
// #else
//   #ifdef AD5940
//     pImpedanceCfg->RcalVal = 1000.0; // modified
//   #endif
// #endif  
//   pImpedanceCfg->SinFreq = 60000.0;
//   // pImpedanceCfg->FifoThresh = 4;
//   pImpedanceCfg->FifoThresh = 4; // ? 5 test cycle * 4 bytes
	
// 	/* Set switch matrix to onboard(EVAL-AD5940ELECZ) dummy sensor. */
// 	/* Note the RCAL0 resistor is 10kOhm. */
//   pImpedanceCfg->DswitchSel = SWD_SE0;
//   pImpedanceCfg->PswitchSel = SWP_SE0;
//   pImpedanceCfg->NswitchSel = SWN_AIN2;
//   pImpedanceCfg->TswitchSel = SWT_AIN2;
// 	/* The dummy sensor is as low as 5kOhm. We need to make sure RTIA is small enough that HSTIA won't be saturated. */
// 	pImpedanceCfg->HstiaRtiaSel = HSTIARTIA_1K;
	
// 	/* Configure the sweep function. */
// 	pImpedanceCfg->SweepCfg.SweepEn = bTRUE;
// 	pImpedanceCfg->SweepCfg.SweepStart = config.freq_begin;	/* Start from 10Hz */
// 	pImpedanceCfg->SweepCfg.SweepStop = config.freq_end;		/* Stop at 100kHz */
// 	pImpedanceCfg->SweepCfg.SweepPoints = config.sample_count;		/* Points is 20 */
// 	pImpedanceCfg->SweepCfg.SweepLog = config.use_log ? bTRUE : bFALSE;
// 	/* Configure Power Mode. Use HP mode if frequency is higher than 80kHz. */
// 	pImpedanceCfg->PwrMod = AFEPWR_HP;
// 	/* Configure filters if necessary */
// 	pImpedanceCfg->ADCSinc3Osr = ADCSINC3OSR_2;		/* Sample rate is 800kSPS/2 = 400kSPS */
//   pImpedanceCfg->DftNum = DFTNUM_16384;
//   pImpedanceCfg->DftSrc = DFTSRC_SINC3;

//   // ?
//   // pImpedanceCfg->ImpODR = 20;
//   // pImpedanceCfg->DacVoltPP = 50;
//   // pImpedanceCfg->AdcPgaGain = ADCPGA_1;
// }

// void elec_eis_loop()
// {
//   uint32_t count;
//   int current = 0;
//   float sweep_results[config.sample_count * 3];
//   while(working)
//   {
//     if(AD5940_GetMCUIntFlag())
//     {
//       // LOG_INF("GPIO0 INT >>");
//       AD5940_ClrMCUIntFlag();
//       count = APPBUFF_SIZE;
//       AppIMPISR(AppBuff, &count);
//       // result.
//       float freq;
//       fImpPol_Type *pImp = (fImpPol_Type*)AppBuff;
//       AppIMPCtrl(IMPCTRL_GETFREQ, &freq);

//       // 选取中间点为标准值
//       int selected_index = count / 2;
//       sweep_results[current++] = freq;
//       sweep_results[current++] = pImp[selected_index].Magnitude; // RzMag
//       sweep_results[current++] = pImp[selected_index].Phase * 180 / MATH_PI; // RzPhase
//       LOG_INF("Frequency: %f", freq);
//       for (int i = 0; i < count; i++) {
//         printk("Impedance[%d]: %f, %f\n", current / 3, pImp[i].Magnitude, pImp[i].Phase * 180 / MATH_PI);
//       }
//       // buffer => protocal
//       uint32_t freq_ = (uint32_t)(freq * 100);
//       uint64_t rz = (uint64_t)(pImp[selected_index].Magnitude * 100);
//       int32_t phase = (int32_t)(pImp[selected_index].Phase * 10000);
//       uint8_t buffer[16];
//       uint8_t index = 0;
//       buffer[index++] = (uint8_t)(freq_ >> 24);
//       buffer[index++] = (uint8_t)(freq_ >> 16);
//       buffer[index++] = (uint8_t)(freq_ >> 8);
//       buffer[index++] = (uint8_t)(freq_ & 0xFF);
//       buffer[index++] = (uint8_t)(rz >> 56);
//       buffer[index++] = (uint8_t)(rz >> 48);
//       buffer[index++] = (uint8_t)(rz >> 40);
//       buffer[index++] = (uint8_t)(rz >> 32);
//       buffer[index++] = (uint8_t)(rz >> 24);
//       buffer[index++] = (uint8_t)(rz >> 16);
//       buffer[index++] = (uint8_t)(rz >> 8);
//       buffer[index++] = (uint8_t)(rz & 0xFF);
//       buffer[index++] = (uint8_t)(phase >> 24);
//       buffer[index++] = (uint8_t)(phase >> 16);
//       buffer[index++] = (uint8_t)(phase >> 8);
//       buffer[index++] = (uint8_t)(phase & 0xFF);

//       send_fac_stream(buffer, 16);

//       // break
//       if (freq >= config.freq_end) {
//         break;
//       }
//     }
//     k_msleep(10);
//   }
//   AppIMPCtrl(IMPCTRL_STOPNOW, 0);
//   k_msleep(10);
//   uint8_t stop_signal[2];
//   stop_signal[0] = 0xFF;
//   stop_signal[1] = 0xFF;
//   send_fac_stream_directly(stop_signal, 2);
//   elec_eis_stop();
//   // AppIMPCtrl(IMPCTRL_STOPNOW, 0);
// }

